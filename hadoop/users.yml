---

- name: frontend
  hosts: frontends
  sudo: yes
  vars:
    users:  "{{ lookup('pipe', 'cat users.txt' ).split('\n') }}"
    admins: "{{ lookup('pipe', 'cat admins.txt').split('\n') }}"
    admin_keys:
      "\
      {{ lookup('pipe', 'for u in `cat admins.txt`; do for f in public_keys/$u/*; do cat $f;echo;done;done') }}\
      "

  tasks:

    - name: frontend | create user accounts
      user:
        name: "{{ item }}"
        createhome: yes
        groups: hadoopuser
        append: yes
        shell: /bin/bash
        state: present
      with_items: users
      tags:
        - frontend_users
        - frontend
        - users

    - name: frontend | unlock authorized_keys
      shell:  chattr -i ~{{ item }}/.ssh/authorized_keys || exit 0
      with_items: users
      tags:
        - frontend_users
        - frontend
        - users

    - name: frontend | add user ssh keys
      authorized_key:
        user: "{{ item }}"
        key: "{{ lookup('pipe', 'for f in public_keys/'+item+'/*; do cat $f;echo;done') }}"
      with_items: users
      tags:
        - frontend_users
        - frontend
        - users

    - name: frontend | add admin ssh keys
      authorized_key:
        user: "{{ item }}"
        key: "{{ admin_keys }}"
      with_items: users
      tags:
        - frontend_users
        - frontend
        - users

    - name: frontend | lock permissions on authorized_keys
      file:
        path: "/home/{{ item }}/.ssh/authorized_keys"
        owner: root
        group: root
        mode: 0444
        state: file
      with_items: users
      tags:
        - frontend_users
        - frontend
        - users

    - name: frontend | make authorized_keys immutable
      command: chattr +i ~{{ item }}/.ssh/authorized_keys
      with_items: users
      tags:
        - frontend_users
        - frontend
        - users


    - name: give sudo rights to admins
      lineinfile:
        dest: "/etc/sudoers.d/{{ item }}"
        line: "{{ item }} ALL=(ALL) NOPASSWD:ALL"
        create: yes
      with_items: admins
      tags:
        - frontend_admin_users
        - frontend
        - admin_users
        - admin
        - users



- name: multi user hadoop setup
  hosts: datanodes[0]
  user: hadoop
  vars:
    users:  "{{ lookup('pipe', 'cat users.txt' ).split('\n') }}"

  tasks:

    - name: check for hdfs:///tmp
      shell: bash -l -c "hadoop fs -test -d /tmp"
      failed_when: False
      register: tmp_exists
      tags: hadoop_users

    - name: check for hdfs:///user
      shell: bash -l -c "hadoop fs -test -d /user"
      failed_when: False
      register: user_exists
      tags: hadoop_users

    - name: check for hdfs:///benchmarks/TestDFSIO
      shell: bash -l -c "hadoop fs -test -d /benchmarks/TestDFSIO"
      failed_when: False
      register: dfsio_exists
      tags: hadoop_users

    - name: check for hdfs:///benchmarks/MRBench
      shell: bash -l -c "hadoop fs -test -d /benchmarks/MRBench"
      failed_when: False
      register: mrbench_exists
      tags: hadoop_users
      
    - name: check for hdfs:///benchmarks/NNBench
      shell: bash -l -c "hadoop fs -test -d /benchmarks/NNBench"
      failed_when: False
      register: nnbench_exists
      tags: hadoop_users
      
    - name: create hdfs:///tmp
      when: tmp_exists != 0
      shell: bash -l -c "hadoop fs -mkdir -p /tmp"
      tags: hadoop_users

    - name: fix permissions in hdfs:///tmp
      shell: bash -l -c "hadoop fs -chmod -R 1777 /tmp"
      tags: hadoop_users

    - name: create hdfs:///benchmarks/TestDFSIO
      when: dfsio_exists != 0
      shell: bash -l -c "hadoop fs -mkdir -p /benchmarks/TestDFSIO"
      tags: hadoop_users

    - name: fix permissions in hdfs:///benchmarks/TestDFSIO
      shell: bash -l -c "hadoop fs -chmod -R 1777 /benchmarks/TestDFSIO"
      tags: hadoop_users
      
    - name: create hdfs:///benchmarks/MRBench
      when: mrbench_exists != 0
      shell: bash -l -c "hadoop fs -mkdir -p /benchmarks/MRBench"
      tags: hadoop_users

    - name: fix permissions in hdfs:///benchmarks/MRBench
      shell: bash -l -c "hadoop fs -chmod -R 1777 /benchmarks/MRBench"
      tags: hadoop_users
      
    - name: create hdfs:///benchmarks/NNBench
      when: nnbench_exists != 0
      shell: bash -l -c "hadoop fs -mkdir -p /benchmarks/NNBench"
      tags: hadoop_users

    - name: fix permissions in hdfs:///benchmarks/NNBench
      shell: bash -l -c "hadoop fs -chmod -R 1777 /benchmarks/NNBench"
      tags: hadoop_users
      
    - name: create hdfs:///user
      when: user_exists.rc != 0
      shell: bash -l -c "hadoop fs -mkdir -p /user"
      tags: hadoop_users

    - name: create users
      shell: bash -lc "hadoop fs -mkdir -p /user/{{ item }}"
      with_items: users
      tags: hadoop_users

    - name: fix access mode on user directories
      shell: bash -lc "hadoop fs -chmod 700 /user/{{ item }}"
      with_items: users
      tags: hadoop_users

    - name: fix ownership on user directories
      shell: bash -lc "hadoop fs -chown -R {{ item }}:{{ item }} /user/{{ item }}"
      with_items: users
      tags: hadoop_users


- name: ssh load balancer
  hosts: loadbalancer
  sudo: yes
  roles:
    - role: common
      package_list:
        - balance

    - role: supervisord
      supervisord_programs:
        balance_ssh:
          command: "balance -f -b 0.0.0.0 2222 {{ groups['frontends'] | join(':22 ') ~':22' }}"
          stdout_logfile: /var/log/balance_ssh-out.log
          stderr_logfile: /var/log/balance_ssh-err.log
